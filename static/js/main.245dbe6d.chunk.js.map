{"version":3,"sources":["store/actions.js","store/reducers.js","component/Home/Home.js","component/Home/HomeHandler.js","component/Project/Project.js","component/Project/ProjectHandler.js","component/RouteNavigation/RouteNavigation.js","component/MyPortfolio/MyPortfolio.js","component/MyPortfolio/MyPortfolioHandler.js","theme/globalStyle.js","component/ChooseLanguage/ChooseStyled.js","component/ChooseLanguage/ChooseLanguage.js","component/ChooseLanguage/ChooseLanguageHandler.js","App.js","index.js"],"names":["ACTION_TYPE","SELECT_LANG","CHANGE_BUTTON","chooseLanguage","lang","type","initialState","language","portfolioState","eng","name","menuNavigation","to","ru","button","text","color","Home","Component","connect","state","dispatch","Project","RouteNavigation","exact","component","HomeHandler","path","ProjectHandler","MyPortfolio","this","props","dataLanguage","src","alt","map","item","key","onClick","GlobalStyle","createGlobalStyle","background","Wrapper","styled","div","Button","ChooseLanguage","changeButton","className","MyPortfolioHandler","store","createStore","action","console","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.245dbe6d.chunk.js","sourcesContent":["export const ACTION_TYPE = {\n  SELECT_LANG: 'select_lang',\n  CHANGE_BUTTON: 'change_button',\n\n};\n\nexport function chooseLanguage(lang) {\n  return {\n    type: ACTION_TYPE.SELECT_LANG,\n    lang\n  };\n}\n\nexport function changeButton(color) {\n  return {\n    type: ACTION_TYPE.CHANGE_BUTTON,\n    color\n  };\n}\n","import { ACTION_TYPE } from \"./actions\";\n\nconst initialState = {\n  language: null,\n  portfolioState: {\n    eng: {\n      lang: 'eng',\n      name: 'Andrew Ivanchenko',\n      menuNavigation: [\n        {name: 'Home', to: '/Home'},\n        {name: 'Project', to: '/Project'},\n        {name: 'Contact', to: '/Contact'},\n        {name: 'About', to: '/About'},\n      ],\n    },\n    ru: {\n      lang: 'ru',\n      name: 'Андрей Иванченко',\n      menuNavigation: [\n        {name: 'Главная', to: '/Home'},\n        {name: 'Проекты', to: '/Project'},\n        {name: 'Контакты', to: '/Contact'},\n        {name: 'Обо мне', to: '/About'},\n      ],\n    },\n  },\n  button: {\n    text: 'like it',\n    color: 'ButtonStart',\n  },\n};\n\nexport function getNextState(state = initialState, action) {\n  console.log(state);\n  switch (action.type) {\n    case ACTION_TYPE.SELECT_LANG:\n      if (action.lang === 'ru') {\n        return {\n          ...state,\n          language: state.portfolioState.ru\n        };\n      } else {\n        return {\n          ...state,\n          language: state.portfolioState.eng\n        };\n      }\n    case ACTION_TYPE.CHANGE_BUTTON:\n      if (action.color === 'ButtonStart') {\n        return {\n          ...state,\n          button: {\n            text: 'liked',\n            color: 'ButtonOne',\n          },\n        };\n      }\n      if (action.color === 'ButtonOne') {\n        return {\n          ...state,\n          button: {\n            text: 'dislike',\n            color: 'ButtonTwo',\n          },\n        };\n      }\n      if (action.color === 'ButtonTwo') {\n        return {\n          ...state,\n          button: {\n            text: 'like it',\n            color: 'Button',\n          },\n        };\n      }\n    default:\n      return state;\n  }\n}","import React, {Component} from 'react';\n\nclass Home extends Component {\n  render() {\n    return (\n      <div>\n        Home\n      </div>\n    );\n  }\n}\n\nexport default Home;","import Home from \"./Home\";\nimport { connect } from 'react-redux';\nimport { } from \"../../store/actions\";\n\nfunction mapStateToProps(state) {\n  return {\n\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import React, {Component} from 'react';\n\nclass Project extends Component {\n  render() {\n    return (\n      <div>\n        Project\n      </div>\n    );\n  }\n}\n\nexport default Project;","import Project from \"./Project\";\nimport { connect } from 'react-redux';\nimport { } from \"../../store/actions\";\n\nfunction mapStateToProps(state) {\n  return {\n\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Project);","import React, {Component} from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport HomeHandler from \"../Home/HomeHandler\";\nimport ProjectHandler from \"../Project/ProjectHandler\";\n\nclass RouteNavigation extends Component {\n\n  render() {\n    return (\n      <Switch>\n        <Route exact component={HomeHandler} path='/Home' />\n        <Route component={ProjectHandler} path='/Project' />\n        <Route />\n        <Route />\n      </Switch>\n    );\n  }\n}\n\nRouteNavigation.propTypes = {};\n\nexport default RouteNavigation;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport RouteNavigation from '../RouteNavigation/RouteNavigation';\n\nclass MyPortfolio extends Component {\n\n  render() {\n    const { dataLanguage, chooseLanguage } = this.props;\n\n    return (\n      <>\n        <header>\n          <img src=\"\" alt=\"Photo\"/>\n          <h1>{ dataLanguage.name }</h1>\n          <nav>\n            <ul>\n            {\n              dataLanguage.menuNavigation.map(item =>\n                (\n                  <li key={item.to}>\n                    <Link to={item.to}>{item.name}</Link>\n                  </li>\n                )\n              )\n            }\n            </ul>\n          </nav>\n          <div>\n            {dataLanguage.lang === 'eng'\n              ? <button onClick={() => chooseLanguage('ru')}>RU</button>\n              : <button onClick={() => chooseLanguage('eng')}>ENG</button>\n            }\n          </div>\n        </header>\n        <main>\n          <RouteNavigation />\n        </main>\n      </>\n    );\n  }\n}\n\nMyPortfolio.propTypes = {};\n\nexport default MyPortfolio;","import MyPortfolio from \"./MyPortfolio\";\nimport { connect } from 'react-redux';\nimport { chooseLanguage } from \"../../store/actions\";\n\nfunction mapStateToProps(state) {\n  return {\n    dataLanguage: state.language,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    chooseLanguage: lang => dispatch(chooseLanguage(lang))\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyPortfolio);","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n      \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    background: ${props => (props.background ? 'white' : 'black')};\n  }\n  *,\n  *:before,\n  *:after {\n    box-sizing: inherit;\n  }\n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\",\n      monospace;\n  }\n  img {\n    max-width: 100%;\n    height: auto;\n  }\n  ul {\n    margin: 0;\n    padding: 0;\n    list-style: none;\n  }\n`;\n\nexport default GlobalStyle;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div `\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  width: 200px;\n  transform: translate(-50%, -50%);\n`;\nexport const Button = styled.button `\n  display: block;\n  width: 100%;\n  margin: 50px 0;\n  padding: 20px;\n  font-size: 22px;\n  font-family: inherit;\n  font-weight: bold;\n  color: black;\n  text-transform: uppercase;\n  background-color: lightsalmon;\n  border: 1px solid lightgoldenrodyellow;\n  border-radius: 10px;\n  cursor: pointer;\n  \n  ::before {\n    content: ${props => (props)};\n  }\n`;\n","import React, {Component} from 'react';\n\nimport MyPortfolioHandler from '../MyPortfolio/MyPortfolioHandler';\nimport GlobalStyle from \"../../theme/globalStyle\";\nimport { Wrapper, Button } from './ChooseStyled';\nimport './ChooseLanguage.css';\n\nclass ChooseLanguage extends Component {\n\n  render() {\n    const { chooseLanguage, changeButton, language, button } = this.props;\n\n    return (\n      <>\n        <GlobalStyle background={language} />\n        <Wrapper className='Wrapper'>\n          { language\n            ?\n              <MyPortfolioHandler />\n            :\n              <>\n                <Button onClick={() => chooseLanguage('eng')}>\n                  ENG\n                </Button>\n                <Button onClick={() => chooseLanguage('ru')}>\n                  RU\n                </Button>\n                <button\n                  onClick={() => changeButton(button.color)}\n                  className={button.color}\n                >\n                  {button.text}\n                </button>\n              </>\n          }\n        </Wrapper>\n      </>\n    );\n  }\n}\n\nChooseLanguage.propTypes = {};\n\nexport default ChooseLanguage;","import ChooseLanguage from \"./ChooseLanguage\";\nimport { connect } from 'react-redux';\nimport { chooseLanguage, changeButton } from \"../../store/actions\";\n\nfunction mapStateToProps(state) {\n  return {\n    language: state.language,\n    button: state.button,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    chooseLanguage: lang => dispatch(chooseLanguage(lang)),\n    changeButton: color => dispatch(changeButton(color)),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChooseLanguage);","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { getNextState } from './store/reducers';\n\nimport ChooseLanguage from './component/ChooseLanguage/ChooseLanguageHandler';\n\nconst store = createStore(getNextState);\n\nexport const App = () => (\n  <Provider store={store}>\n    <ChooseLanguage />\n  </Provider>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}